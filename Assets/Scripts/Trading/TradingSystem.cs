using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

using TMPro;
using UnityEngine.UI;

public class TradingSystem : MonoBehaviour
{
    //ñèíãëòîí:
    public static TradingSystem instance;

    [SerializeField] GameObject cardPrefab;
    [SerializeField] GameObject tradePanel;
    [SerializeField] GameObject resultPanel;
    [SerializeField] Image failTradeIcon;//DESIGN
    [SerializeField] Image successTradeIcon;//DESIGN
    [SerializeField] TMP_Text resultMessageText;
    [SerializeField] TMP_Text fromWhoText;
    [SerializeField] TMP_Text titleText;

    [Header("ËÅÂÀß ÑÒÎĞÎÍÀ - OFFER")]
    [SerializeField] TMP_Text leftOffererNameText;
    [SerializeField] Transform leftCardGrid;
    [SerializeField] ToggleGroup leftToggleGroup; //ÀÊÒÈÂÀÒÎĞ ÂÛÁÎĞÀ ÊÀĞÒÎ×ÊÈ
    [SerializeField] TMP_Text leftYourMoneyText;
    [SerializeField] TMP_Text leftOfferMoneyText;
    [SerializeField] Slider leftOfferMoneySlider;

    List<GameObject> leftCardPrefabList = new List<GameObject>();
    Player leftPlayerReference;

    [Header("ÖÅÍÒĞ")]
    [SerializeField] Transform buttonGrid;
    [SerializeField] GameObject choosePlayerButtonPrefab;
    List<GameObject> playerButtonList = new List<GameObject>();
    [SerializeField] Button submitTradeOfferButton;

    [Header("ÏĞÀÂÀß ÑÒÎĞÎÍÀ - REQUEST")]
    [SerializeField] TMP_Text rightOffererNameText;
    [SerializeField] Transform rightCardGrid;
    [SerializeField] ToggleGroup rightToggleGroup; //ÀÊÒÈÂÀÒÎĞ ÂÛÁÎĞÀ ÊÀĞÒÎ×ÊÈ
    [SerializeField] TMP_Text rightYourMoneyText;
    [SerializeField] TMP_Text rightOfferMoneyText;
    [SerializeField] Slider rightOfferMoneySlider;

    List<GameObject> rightCardPrefabList = new List<GameObject>();
    Player rightPlayerReference;

    [Header("ÎÊÍÎ ÏĞÅÄËÎÆÅÍÍÎÉ ÑÄÅËÊÈ(îò ÈÈ ê ÈÃĞÎÊÓ)")]
    [SerializeField] GameObject tradeOfferPanel;
    [SerializeField] TMP_Text fromWhoOfferText;
    [SerializeField] TMP_Text descriptionText;
    [SerializeField] TMP_Text leftOfferedMoneyText;
    [SerializeField] TMP_Text rightRequestedMoneyText;
    [SerializeField] GameObject leftCard, rightCard;
    [SerializeField] Image leftColorField, rightColorField;
    [SerializeField] Image leftPropertyImage, rightPropertyImage;
    [SerializeField] Sprite propertySprite, railroadSprite, utilitySprite;
    [SerializeField] TMP_Text leftCardNameText, rightCardNameText, leftCardPriceText, rightCardPriceText;
    [SerializeField] Image tradeICON;

    //ÄÀÍÍÛÅ ÄËß ÏĞÅÄËÎÆÅÍÈÉ ÒĞÅÉÄÀ ÎÒ ÈÈ ÈÃĞÎÊÓ
    Player currentPlayer, nodeOwner;
    MonopolyNode offeredNode, requestedNode;
    int offeredMoney, requestedMoney;

    public bool isCorrupted = false;

    //MESSAGE SYSTEM - ÑÈÑÒÅÌÀ ÄÈÀËÎÃÎÂÛÕ ÎÊÎÍ
    public delegate void UpdateMessage(string message);
    public static UpdateMessage OnUpdateMessage;

    //SKILLS
    public float SpeculantBonus { get; set; } = 0.05f;
    
    private void Awake()
    {
        instance = this;
    }

    private void Start()
    {
        tradePanel.SetActive(false);
        resultPanel.SetActive(false);
        tradeOfferPanel.SetActive(false);
    }

    //ÍÀÕÎÆÄÅÍÈÅ ÍÅÄÎÑÒÀŞÙÈÕ ÊÀĞÒÎ×ÅÊ ÄËß ÑÅÒÀ (ÈÈ)
    public void FindMissingProperty(Player currentPlayer)
    {
        List<MonopolyNode> processedSet = null;//ÍÅ ÈÇÌÅÍßÒÜ processedSet!!!
        MonopolyNode requestedNode = null;

        //Debug.Log("TRADING+  FIND");
        foreach (var node in currentPlayer.GetMonopolyNodes)
        {
            var (list, allSame) = MonopolyBoard.instance.PlayerHasAllNodesOfSet(node);
            List<MonopolyNode> nodeSets = new List<MonopolyNode>();
            nodeSets.AddRange(list);//Òåïåğü ıòî êîïèÿ (àíàëîãè÷íî ManageUI)

            //ÏĞÎÂÅĞÈÒÜ, ÊÓÏËÅÍÛ ËÈ ÂÑÅ
            //åñëè õîòü îäèí - null, òî êóïëåíû íå âñå (notAllPurchased = true)
            bool notAllPurchased = list.Any(n => n.Owner == null);

            //Ó ÈÈ óæå åñòü ıòîò ñåò?
            if (allSame || processedSet == list || notAllPurchased)
            {
                processedSet = list;
                continue;
            }
            //ÍÀÉÒÈ ÒÓ, ×ÒÎ ÇÀÍßÒÀ ÄĞÓÃÈÌ ÈÃĞÎÊÎÌ
            //ÍÎ ÏĞÎÂÅĞÈÒÜ, ×ÒÎ Ó ÈÃĞÎÊÀ ÊÎËÈ×ÅÑÒÂÎ ÊÀĞÒÎ×ÅÊ ÁÎËÜØÅ ÑĞÅÄÍÅÃÎ
            if (list.Count == 2)//ñåò èç 2 êàğòî÷åê + !!! (ÆÄ - 4, ÓÒÈËÈÒÈ - 2)
            {
                requestedNode = list.Find(n => n.Owner != currentPlayer && n.Owner != null);//Ëÿìáäà
                if (requestedNode != null)
                {
                    //ÑÄÅËÀÒÜ ÏĞÅÄËÎÆÅÍÈÅ ÂËÀÄÅËÜÖÓ ÊÀĞÒÎ×ÊÈ
                    MakeTradeDecision(currentPlayer, requestedNode.Owner, requestedNode);//ÎÔÔÅĞ ÂÍÓÒĞÈ Decision
                    break;//èëè return;??
                }
            }
            if (list.Count >= 3)//ñåò èç 3 êàğòî÷åê è ÆÄ
            {//LINQ
                int hasMostOfSet = list.Count(n => n.Owner == currentPlayer);
                if (hasMostOfSet >= 2)//+æä óòèë
                {
                    requestedNode = list.Find(n => n.Owner != currentPlayer && n.Owner != null);//Ëÿìáäà
                    //ÑÄÅËÀÒÜ ÏĞÅÄËÎÆÅÍÈÅ ÂËÀÄÅËÜÖÓ ÊÀĞÒÎ×ÊÈ
                    MakeTradeDecision(currentPlayer, requestedNode.Owner, requestedNode);
                    break;//èëè return;??
                }
            }
        }
        //ÏĞÎÄÎËÆÅÍÈÅ ÈÃĞÛ ÅÑËÈ ÍÈ×ÅÃÎ ÍÅ ÍÀÉÄÅÍÎ (ÒĞÅÉÄ ÍÅÂÎÇÌÎÆÅÍ)   
        if (requestedNode == null)
        {
            //Debug.Log("TRADING+  null");
            currentPlayer.ChangeState(Player.AIStates.IDLE);
        }
    }

    //ÏĞÈÍßÒÈÅ ĞÅØÅÍÈß Î ÖÅËÅÑÎÎÁĞÀÇÍÎÑÒÈ ÎÔÔÅĞÀ
    void MakeTradeDecision(Player currentPlayer, Player nodeOwner, MonopolyNode requestedNode)
    {
        Debug.Log("7"+currentPlayer.nickname + " = current. \n" + nodeOwner.nickname + " = nodeOwner");
        //ÄÅÍÜÃÀÌÈ, ÅÑËÈ ÌÎÆÍÎ (ÔÎĞÌÓËÀ ÒÎĞÃÎÂËÈ ÄÅÍÜÃÀÌÈ)
        if (currentPlayer.ReadMoney >= CalculateValueOfNode(requestedNode, currentPlayer))
        {
            //ÒÎĞÃÎÂËß ÒÎËÜÊÎ ÒÎËÜÊÎ ÄÅÍÜÃÀÌÈ:
            //ÑÎÇÄÀÍÈÅ ÎÔÔÅĞÀ
            Debug.Log("ÄÅÍÅÆÍÛÉ ÒĞÅÉÄ:");
            MakeTradeOffer(currentPlayer, nodeOwner, requestedNode, null, CalculateValueOfNode(requestedNode, currentPlayer), 0);
            //offeredNode=null äëÿ òîğãîâëè ÄÅÍÜÃÀÌÈ
            return;
        }
        bool foundDecision = false;//ÏĞÎÂÅĞÊÀ + ôèêñ áàãà (íå âûõîäèë èç öèêëà åñëè íå íàõîäèë êàê ïîòîğãîâàòü)

        //ÍÀÉÒÈ ÂÑÅ ÍÅÏÎËÍÛÅ ÑÅÒÛ È ÂÛ×ÅÑÒÜ ÑÅÒ Ñ ÇÀÏĞÎØÅÍÍÎÉ ÊÀĞÒÎ×ÊÎÉ
        foreach (var node in currentPlayer.GetMonopolyNodes)
        {
            //Contains:
            var checkedSet = MonopolyBoard.instance.PlayerHasAllNodesOfSet(node).list;
            if (checkedSet.Contains(requestedNode))
            {
                //ÍÀÉÄÅÍ, ÎÑÒÀÍÎÂÈÒÜ ÏÎÈÑÊ
                continue;
            }
            if (checkedSet.Count(n => n.Owner == currentPlayer) == 1)//ÊÀÆÄÀß ÊÀĞÒÎ×ÊÀ, ÃÄÅ ÂËÀÄÅËÅÖ - currentPLayer
            {
                if (CalculateValueOfNode(node, currentPlayer) + currentPlayer.ReadMoney >= requestedNode.Price)
                {
                    //ÔÎĞÌÓËÀ ğàññ÷¸òà ĞÀÇÍÈÖÛ ÌÅÆÄÓ ÒÎĞÃÓÅÌÛÌÈ ÊÀĞÒÎ×ÊÀÌÈ
                    int difference = CalculateValueOfNode(requestedNode, currentPlayer) - CalculateValueOfNode(node, currentPlayer);
                    Debug.Log(difference + "= difference");
                    if (difference >= 0)
                    {
                        //ÓÑËÎÂÈß ÂÛÏÎËÍßŞÒÑß = ÂÎÇÌÎÆÍÀß ÑÄÅËÊÀ
                        //ÑÄÅËÀÒÜ ÑÀÌ ÎÔÔÅĞ
                        MakeTradeOffer(currentPlayer, nodeOwner, requestedNode, node, difference, 0);
                    }
                    else
                    {
                        MakeTradeOffer(currentPlayer, nodeOwner, requestedNode, node, 0, Mathf.Abs(difference));
                    }
                    //áåç ÇÀÏĞÎÑÀ ÄÅÍÅÃ + 
                    //offeredNode = node ÷åğåç êîòîğûé ø¸ë ÖÈÊË
                    //requestedMoney = 0;
                    foundDecision = true;
                    break;
                }
            }
        }
        if (!foundDecision)//FIX#162++
        {
            currentPlayer.ChangeState(Player.AIStates.IDLE);
        }
    }

    //------------------------------ÑÄÅËÀÒÜ ÎÔÔÅĞ
    void MakeTradeOffer(Player currentPlayer,Player nodeOwner, MonopolyNode requestedNode, 
        MonopolyNode offeredNode, int offeredMoney, int requestedMoney)
    {
        Debug.Log("1"+currentPlayer.nickname + " = current. \n" + nodeOwner.nickname + " = nodeOwner");
        Debug.Log("2"+currentPlayer.playerType + " = current. \n" + nodeOwner.playerType + " = nodeOwner");

        if (nodeOwner.playerType == Player.PlayerType.AI)
        {
            ConsiderTradeOffer(currentPlayer, nodeOwner, requestedNode, offeredNode, offeredMoney, requestedMoney);
        }
        else if(nodeOwner.playerType == Player.PlayerType.HUMAN)
        {
            //UI ĞÀÑÑÌÎÒĞÅÍÈß ÎÔÔÅĞÀ äëÿ èãğîêà (HUMAN)
            ShowTradeOfferPanel(currentPlayer, nodeOwner,requestedNode, offeredNode, offeredMoney, requestedMoney);
        }
    }

    //ĞÀÑÑÌÎÒĞÅÒÜ ÎÔÔÅĞ(ÈÈ)(AI)
    void ConsiderTradeOffer(Player currentPlayer, Player nodeOwner, MonopolyNode requestedNode,
        MonopolyNode offeredNode, int offeredMoney, int requestedMoney)
    {
        Debug.Log("3"+currentPlayer.nickname + " = current. \n" + nodeOwner.nickname + " = nodeOwner");
        //(600+req0) - (300+off300) 
        //(300+req300) - (600+off0)
        Debug.Log(requestedMoney + "= reqMoney + ");
        Debug.Log(CalculateValueOfNode(requestedNode, currentPlayer) + "= CalcReq");
        Debug.Log(offeredMoney + "= offeredMoney + ");
        Debug.Log(CalculateValueOfNode(offeredNode, currentPlayer) + "= CalcOff");

        int valueOfTrade = (CalculateValueOfNode(requestedNode, currentPlayer) + requestedMoney) - (CalculateValueOfNode(offeredNode, currentPlayer) + offeredMoney);

        Debug.Log((CalculateValueOfNode(requestedNode, currentPlayer) + requestedMoney) + " = ëåâî(íî Req) -");
        Debug.Log((CalculateValueOfNode(offeredNode, currentPlayer) + offeredMoney) + " = ïğàâî(íîOffer).");
        Debug.Log(valueOfTrade + " = valueOfTrade");
        //ÈÈ ÏĞÅÄËÎÆÈÒ ÈÃĞÎÊÓ ÒĞÅÉÄ, ÃÄÅ ÇÀÕÎ×ÅÒ ÏĞÎÄÀÒÜ ÊÀĞÒÎ×ÊÓ ÇÀ $$$-ÄÅÍÜÃÈ-BYN (ñêîğåå âñåãî ğàáîòàòü íå áóäåò êàíåøíî...
        //ÄËß İÒÎÃÎ: 1) íå äîëæíî áûòü çàïğîñà êàğòî÷êè
        //           2) íå äîëæíî áûòü çàïğîñà äåíåã ó èãğîêà
        //           3) äîëæíà áûòü ïğåäëàãàåìàÿ êàğòî÷êà
        //           4) ÔÎĞÌÓËÀ: çàïğîøåííûõ äåíåã < êîë-âî äåíåã èãğîêà / 2
        //           5) ÈÈ íå äîëæåí ñîãëàøàòüñÿ, åñëè ó íåãî åñòü ñåò
        Debug.Log(requestedNode + " = requestedNode");
        Debug.Log(offeredNode + " = offeredNode");
        Debug.Log(requestedMoney+ " = reqMoney <= nodeowner money = " + nodeOwner.ReadMoney/3);
        Debug.Log(!MonopolyBoard.instance.PlayerHasAllNodesOfSet(requestedNode).areAllSame + "= playerHasAllNodesOfset");
        if (requestedNode == null && offeredNode!=null &&  requestedMoney <= nodeOwner.ReadMoney / 3
            && !MonopolyBoard.instance.PlayerHasAllNodesOfSet(requestedNode).areAllSame)
        {
            Trade(currentPlayer, nodeOwner, requestedNode, offeredNode, offeredMoney, requestedMoney);
            if (currentPlayer.playerType == Player.PlayerType.HUMAN)
            {
                TradeResult(true);
            }
            return;
        }
        
        //ÎÁÛ×ÍÛÉ ÒĞÅÉÄ, ÃÄÅ ÌÎÆÍÎ ÎÁÌÅÍßÒÜ ÊÀĞÒÎ×ÊÈ Ñ ÄÎÏËÀÒÎÉ(èëè áåç)
        if (valueOfTrade <= 0 && !MonopolyBoard.instance.PlayerHasAllNodesOfSet(requestedNode).areAllSame)
        {
            Debug.Log("4"+currentPlayer.nickname + " = current. \n" + nodeOwner.nickname + " = nodeOwner");
            //ÒÎĞÃÎÂËß ÄÎÑÒÓÏÍÀ
            Trade(currentPlayer,nodeOwner,requestedNode,offeredNode,offeredMoney,requestedMoney);
            if (currentPlayer.playerType == Player.PlayerType.HUMAN)
            {
                Debug.Log("5" + currentPlayer.nickname + " = current. \n" + nodeOwner.nickname + " = nodeOwner");
                if (!isCorrupted)
                {
                    TradeResult(true);
                    Debug.Log("ÈÈ ïîíğàâèëñÿ îôôåğ");
                }
                else
                {
                    TradeResult(false);
                    Debug.Log("ÈÈ Íå ïîíğàâèëñÿ îôôåğ");
                }
            }
        }
        else
        {
            if (currentPlayer.playerType == Player.PlayerType.HUMAN)
            {
                Debug.Log("6"+currentPlayer.nickname + " = current. \n" + nodeOwner.nickname + " = nodeOwner");
                TradeResult(false);
            }
            //DEBUG èëè ERROR "ÈÈ Îòêàçàë Âàì";
            Debug.Log("ÈÈ Íå ïîíğàâèëñÿ îôôåğ");
        }
    }

    //ĞÀÑÑ×ÈÒÀÒÜ ÑÒÎÈÌÎÑÒÜ ÊÀĞÒÎ×ÊÈ(ÈÈ)
    int CalculateValueOfNode(MonopolyNode requestedNode, Player player)
    {
        int value = 0;
        if (requestedNode != null)
        {
            if (requestedNode.type == MonopolyNodeType.Property)
            {
                value = requestedNode.Price * 2 + requestedNode.NumberOfHouses * player.GetHouseCostForPlayer(requestedNode);
            }
            else
            {
                value = requestedNode.Price * 2;
            }
            return value;
        }
        return value;
    }

    //ÒÎĞÃÎÂÀß ÔÓÍÊÖÈß:
    void Trade(Player currentPlayer, Player nodeOwner, MonopolyNode requestedNode,
        MonopolyNode offeredNode, int offeredMoney, int requestedMoney)
    {
        Debug.Log("Trade FUNCTION.");
        if (requestedNode != null)
        {
            Debug.Log(requestedMoney + " requestedMoney");
            Debug.Log(requestedNode.name + " requested");
            //currentPlayer ÄÎËÆÅÍ:
            currentPlayer.PayMoney(offeredMoney); //çàïëàòèòü ÒÎÌÓ, ÊÎÌÓ ïğåäëàãàåò
            requestedNode.ChangeOwner(currentPlayer); //Âëàäåëüöåì çàïğîøåííîé êàğòî÷êè ñòàíîâèòñÿ ÒÎÒ, ÊÒÎ ïğåäëîæèë

            //nodeOwner ÄÎËÆÅÍ:
            nodeOwner.CollectMoney(offeredMoney); //ÒÎÒ, ÊÎÌÓ ïğåäëàãàåò ÏÎËÓ×ÀÅÒ ÄÅÍÜÃÈ Ñ ÎÔÔÅĞÀ
            nodeOwner.PayMoney(requestedMoney);//ÒÎÒ, ÊÎÌÓ ïğåäëîæèë - ïëàòèò
            if (offeredNode != null)
            {
                Debug.Log(offeredNode.name + " offered node");
                offeredNode.ChangeOwner(nodeOwner);//Âëàäåëüöåì ïğåäëîæåííîé êàğòî÷êè ñòàíîâèòñÿ ÒÎÒ, ÊÎÌÓ ïğåäëîæèë
            }
            //ÎÁÍÎÂÈÒÜ UI(îáùàÿ èñòîğèÿ ñîáûòèé)
            //UI ÎÁÍÎÂËÅÍ:
            string offeredNodeName = (offeredNode != null) ? " âçàìåí " + offeredNode.name : "";
            if (offeredMoney != 0)
            {
                Debug.Log(offeredMoney + " offeredMoney");
                OnUpdateMessage.Invoke("<color=red>ÑÄÅËÊÀ!</color> " + currentPlayer.nickname + " ïîëó÷èë " + requestedNode.name +
                    offeredNodeName + " îò  " + nodeOwner.nickname + "è " + offeredMoney + "BYN ñâåğõ ıòîãî.");
            }
            else
            {
                OnUpdateMessage.Invoke("<color=red>ÑÄÅËÊÀ!</color> " + currentPlayer.nickname + " ïîëó÷èë " + requestedNode.name +
                    offeredNodeName + " îò " + nodeOwner.nickname + ".");
            }
        }
        else if (offeredNode != null && requestedNode == null)
        {
            currentPlayer.CollectMoney(requestedMoney);//ÒÎÒ, ÊÒÎ ïğåäëîæèë - ïîëó÷àåò
            nodeOwner.PayMoney(requestedMoney);
            offeredNode.ChangeOwner(nodeOwner);//Âëàäåëüöåì ïğåäëîæåííîé êàğòî÷êè ñòàíîâèòñÿ ÒÎÒ, ÊÎÌÓ ïğåäëîæèë
            //UI ÎÁÍÎÂËÅÍ:
            OnUpdateMessage.Invoke("<color=red>ÑÄÅËÊÀ!</color> " + currentPlayer.nickname + " ïğîäàë " + offeredNode.name + " " +
                nodeOwner.nickname + " çà " + requestedMoney + ".");
        }
        else if(offeredNode==null && requestedNode == null && (requestedMoney!=0 || offeredMoney!=0))
        {
            Debug.Log("Ïîïûòêà âçÿòêè.");
            isCorrupted = true;
        }

        //SKILL--Speculant
        List<Player> playerList = GameManager.instance.GetPlayers;
        if(offeredNode != null) Debug.Log("offered node price = " + offeredNode.Price);
        if(requestedNode != null) Debug.Log("requested node price = " + requestedNode.Price);
        Debug.Log("offered money = " + offeredMoney + " ;requested money " + requestedMoney);

        int totalTradeValue = offeredMoney + requestedMoney;
        if (offeredNode != null)
        {
            totalTradeValue += offeredNode.Price;
        }
        if (requestedNode != null)
        {
            totalTradeValue += requestedNode.Price;
        }
        int calculatedSpeculantBonus = (int)Mathf.Ceil(totalTradeValue * SpeculantBonus);

        foreach (Player player in playerList)
        {
            if (player.Skills.Any((playerSkill) => playerSkill.SkillType == SkillManager.SkillType.Speculant))
            {
                player.CollectMoney(calculatedSpeculantBonus);
                Debug.Log("Speculant trait granted player \"" + player.nickname +"\" " + calculatedSpeculantBonus + " BYN as bonus");
            }
        }
        ManageUI.instance.UpdateBottomMoneyText(currentPlayer.ReadMoney);

        //ÑÏĞßÒÀÒÜ UI
        Debug.Log("Ñäåëêà ñîâåğøåíà!");
        CloseTradePanel();
        if(currentPlayer.playerType == Player.PlayerType.AI)
        {
            currentPlayer.ChangeState(Player.AIStates.IDLE);
        }
    }

    //UI---------------------------- ÈÍÒÅĞÔÅÉÑ

    public void OpenTradePanel()
    {
        leftPlayerReference = GameManager.instance.GetCurrentPlayer;
        rightOffererNameText.text = "êîìó?";
        //submitTradeOfferButton.interactable = false;
        CreateLeftPanel();
        CreateMiddleButtons();
    }
    public void CloseTradePanel()
    {
        tradePanel.SetActive(false);
        ClearAll();
    }

    //CURRENT PLAYER---------------- ËÅÂÎ
    void CreateLeftPanel()
    {
        leftOffererNameText.text = leftPlayerReference.nickname + " ïğåäëàãàåò ";

        List<MonopolyNode> referenceNodes = leftPlayerReference.GetMonopolyNodes;

        for (int i = 0; i < referenceNodes.Count; i++)
        {
            GameObject tradeCard = Instantiate(cardPrefab, leftCardGrid, false);//leftCardGrid->cardPrefab local WS
            //ÍÀÑÒĞÎÉÊÀ ÑÎÄÅĞÆÀÍÈß ÊÀĞÒÎ×ÊÈ(prefab'a)
            tradeCard.GetComponent<TradePropertyCard>().SetTradeCard(referenceNodes[i], leftToggleGroup);

            leftCardPrefabList.Add(tradeCard);
        }
        leftYourMoneyText.text = "ÁÀÍÊ: " + leftPlayerReference.ReadMoney + "BYN";
        //ÍÀÑÒĞÎÉÊÀ ÑËÀÉÄÅĞÀ È ÒÅÊÑÒÀ
    leftOfferMoneySlider.maxValue = leftPlayerReference.ReadMoney;
    leftOfferMoneySlider.value = 0;
    UpdateLeftSlider(leftOfferMoneySlider.value);//ÎÁÍÎÂËÅÍÈÅ ÑËÀÉÄÅĞÀ Â ĞÅÀËÜÍÎÌ ÂĞÅÌÅÍÈ
        //RESET ÏÎÑËÅ ÇÀÊĞÛÒÈß ÂÊËÀÄÊÈ

        tradePanel.SetActive(true);
    }
    
    public void UpdateLeftSlider(float value)
    {
        leftOfferMoneyText.text = "Äîáàâèòü ñâåğõ ïğåäëîæåííîãî: " + leftOfferMoneySlider.value + "BYN"; 
        if (leftOfferMoneySlider.value > 0) //FIX äîáàâèòü ïğîâåğêó: âûáğàíà ëè êàğòî÷êà + UpdateRightSlider 
        {
            submitTradeOfferButton.interactable = true;
        }
        else
        {
            submitTradeOfferButton.interactable = false;
        }
    }


    //SELECTED PLAYER--------------- ÏĞÀÂÎ

    public void ShowRightPlayer(Player player)
    {
        rightPlayerReference = player;

        //!!!ÎÁÍÎÂÈÒÜ ÒÅÊÓÙÈÉ ÊÎÍÒÅÍÒ (îò ïğåäûäóùåãî âûáîğà)
        ClearRightPanel();
        //ÏÎÊÀÇÀÒÜ ÏĞÀÂÓŞ ×ÀÑÒÜ (REQUEST) ÄËß ÂÛÁĞÀÍÍÎÃÎ ÈÃĞÎÊÀ

        rightOffererNameText.text = "îáìåíÿòüñÿ ñ " + rightPlayerReference.nickname;
        List<MonopolyNode> referenceNodes = rightPlayerReference.GetMonopolyNodes;
        for (int i = 0; i < referenceNodes.Count; i++)
        {
            GameObject tradeCard = Instantiate(cardPrefab, rightCardGrid, false);//rightCardGrid->cardPrefab +local WS
            //ÍÀÑÒĞÎÉÊÀ ÑÎÄÅĞÆÀÍÈß ÊÀĞÒÎ×ÊÈ(prefab'a)
            tradeCard.GetComponent<TradePropertyCard>().SetTradeCard(referenceNodes[i], rightToggleGroup);
            rightCardPrefabList.Add(tradeCard);
        }
        rightYourMoneyText.text = "ÁÀÍÊ: " + rightPlayerReference.ReadMoney + "BYN";
        //ÎÁÍÎÂÈÒÜ ÏĞÀÂÛÉ ÑËÀÉÄÅĞ È ÄÅÍÜÃÈ
        rightOfferMoneySlider.maxValue = rightPlayerReference.ReadMoney;
        rightOfferMoneySlider.value = 0;
        UpdateLeftSlider(rightOfferMoneySlider.value);//ÎÁÍÎÂËÅÍÈÅ ÑËÀÉÄÅĞÀ Â ĞÅÀËÜÍÎÌ ÂĞÅÌÅÍÈ
      
    }

    public void UpdateRightSlider(float value)
    {
        rightOfferMoneyText.text = "Çàïğîñèòü ñâåğõ ïğåäëîæåííîãî: " + rightOfferMoneySlider.value + "BYN";
        if (rightOfferMoneySlider.value > 0)
        {
            submitTradeOfferButton.interactable = true;
        }
        else
        {
            submitTradeOfferButton.interactable = false;
        }
    }

    //MIDDLE----------------------- ÖÅÍÒĞ
    void CreateMiddleButtons()
    {
        //CLEAR
        for (int i = playerButtonList.Count - 1; i >= 0; i--) 
        {
            Destroy(playerButtonList[i]);
        }
        playerButtonList.Clear();
        List<Player> allPlayers = new List<Player>();
        allPlayers.AddRange(GameManager.instance.GetPlayers);
        allPlayers.Remove(leftPlayerReference);
        foreach (var player in allPlayers)
        {
            GameObject newPlayerButton = Instantiate(choosePlayerButtonPrefab, buttonGrid, false);
            newPlayerButton.GetComponent<TradePlayerButton>().SetPlayer(player);

            playerButtonList.Add(newPlayerButton);
        }

        //ÖÈÊË ÂÑÅÕ ÈÃĞÎÊÎÂ
    }
    
    //Î×ÈÑÒÊÀ---------------------- Î×ÈÑÒÊÀ
    void ClearAll()
    {
        rightOffererNameText.text = "êîìó?";
        rightYourMoneyText.text = "Áàíê: ";
        rightOfferMoneySlider.maxValue = 0;
        rightOfferMoneySlider.value = 0;
        UpdateRightSlider(rightOfferMoneySlider.value);
        //CLEAR ÊÍÎÏÊÈ ÂÛÁÎĞÀ ÈÃĞÎÊÀ
        for (int i = playerButtonList.Count - 1; i >= 0; i--)
        {
            Destroy(playerButtonList[i]);
        }
        playerButtonList.Clear();

        //CLEAR ËÅÂÎ - ÊÀĞÒÎ×ÊÈ
        for (int i = leftCardPrefabList.Count - 1; i >= 0; i--)
        {
            Destroy(leftCardPrefabList[i]);
        }
        leftCardPrefabList.Clear();

        //CLEAR ÏĞÀÂÎ - ÊÀĞÒÎ×ÊÈ
        for (int i = rightCardPrefabList.Count - 1; i >= 0; i--)
        {
            Destroy(rightCardPrefabList[i]);
        }
        rightCardPrefabList.Clear();
    }
    void ClearRightPanel()
    {
        //CLEAR ÏĞÀÂÎ - ÊÀĞÒÎ×ÊÈ
        for (int i = rightCardPrefabList.Count - 1; i >= 0; i--)
        {
            Destroy(rightCardPrefabList[i]);
        }
        rightCardPrefabList.Clear();
        //ÍÀÑÒĞÎÉÊÀ ÑËÀÉÄÅĞÀ È ÒÅÊÑÒÀ
        rightOfferMoneySlider.maxValue = 0;//ïîëíîñòüş ÎÁÍÓËÅÍÈÅ ñëàéäåğï
        rightOfferMoneySlider.value = 0;
        UpdateRightSlider(rightOfferMoneySlider.value);//ÎÁÍÎÂËÅÍÈÅ ÑËÀÉÄÅĞÀ Â ĞÅÀËÜÍÎÌ ÂĞÅÌÅÍÈ(ïğàâîãî)
    }

    //ÎÔÔÅĞ---------------ÎÔÔÅĞ---------------ÎÔÔÅĞ
    public void MakeOfferButton() //ÏÎÄÒÂÅĞÆÄÅÍÈÅ ÑÄÅËÊÈ (ÊÍÎÏÊÀ)
    {
        MonopolyNode requestedNode = null;
        MonopolyNode offeredNode = null;
        if (rightPlayerReference == null)
        {
            //ERROR ("èãğîêà äëÿ òîğãîâëè íå áûëî âûáğàíî")//FIX êíîïêè àêòèâ
            //Debug.Log("èãğîêà äëÿ òîğãîâëè íå áûëî âûáğàíî");
            return;
        }
        //ËÅÂÀß ÂÛÁĞÀÍÍÀß ÊÀĞÒÎ×ÊÀ
        Toggle offeredToggle = leftToggleGroup.ActiveToggles().FirstOrDefault();//ÍÀÕÎÆÄÅÍÈÅ ÏÅĞÂÎÃÎ ÀÊÒÈÂÍÎÃÎ ÒÎÃÃËÀ (ÂÑÅÃÎ ÎÄÈÍ ÀÊÒÈÂÅÍ)
        if (offeredToggle != null)
        {
            offeredNode = offeredToggle.GetComponentInParent<TradePropertyCard>().Node();//(ÂÎÇÌÎÆÍÎ ÍÓÆÅÍ //FIX)
        }
        //ÏĞÀÂÀß ÂÛÁĞÀÍÍÀß ÊÀĞÒÎ×ÊÀ

        Toggle requestedToggle = rightToggleGroup.ActiveToggles().FirstOrDefault();//ÍÀÕÎÆÄÅÍÈÅ ÏÅĞÂÎÃÎ ÀÊÒÈÂÍÎÃÎ ÒÎÃÃËÀ (ÂÑÅÃÎ ÎÄÈÍ ÀÊÒÈÂÅÍ)
        if (requestedToggle != null)
        {
            requestedNode = requestedToggle.GetComponentInParent<TradePropertyCard>().Node();//(ÂÎÇÌÎÆÍÎ ÍÓÆÅÍ //FIX)¹143
        }
        MakeTradeOffer(leftPlayerReference, rightPlayerReference, requestedNode, offeredNode,
            (int)leftOfferMoneySlider.value, (int)rightOfferMoneySlider.value);//ÏĞßÌÎÅ ÏĞÅÎÁĞÀÇÎÂÀÍÈÅ ÒÈÏÀ
    }

    //------------------ĞÅÇÓËÜÒÀÒ ÑÄÅËÊÈ----------------------
    void TradeResult(bool isAccepted)
    {
        
        //DESIGN
        if (isAccepted)
        {
            titleText.text = "Ïîäòâåğæäåíèå";
            fromWhoText.text = "Îò: " +rightPlayerReference.nickname;
            resultMessageText.text = "\"Çâó÷èò âûãîäíî\". Ñêàçàë - êàê îòğåçàë.<br>" +
                " Ñäåëêà ñîñòîÿëàñü è áûëà <color=green>ïîäòâåğæäåíà</color>.";
        }
        else
        {
            titleText.text = "Ñäåëêà íå ñîñòîÿëàñü";
            fromWhoText.text = "Îò: " + rightPlayerReference.nickname;
            resultMessageText.text = "\"Òû êîãî õî÷åøü íà.. îáìàíóòü, à?\" <br>Ê ñîæàëåíèş, " + 
                " ñäåëêà íå ñîñòîÿëàñü è áûëà <color=red>îòêëîíåíà</color>.";
        }
        resultPanel.SetActive(true);
    }

    //------------------------ÏĞÅÄËÎÆÅÍÈÅ-----------------------(ÎÒ ÈÈ ÈÃĞÎÊÓ)
    void ShowTradeOfferPanel(Player _currentPlayer, Player _nodeOwner, MonopolyNode _requestedNode,
        MonopolyNode _offeredNode, int _offeredMoney, int _requestedMoney)
    {
        //[SerializeField] GameObject tradeOfferPanel;
        //[SerializeField] TMP_Text fromWhoOfferText;
        //[SerializeField] TMP_Text descriptionText;
        //[SerializeField] TMP_Text leftOfferedMoneyText;
        //[SerializeField] TMP_Text rightRequestedMoneyText;
        //[SerializeField] GameObject leftCard, rightCard;
        //[SerializeField] Image leftColorField, rightColorField;
        //[SerializeField] Image leftPropertyImage, rightPropertyImage;
        //[SerializeField] Sprite propertySprite, railroadSprite, utilitySprite;
        //[SerializeField] TMP_Text leftCardNameText, rightCardNameText, leftCardPriceText, rightCardPriceText;

        //ÇÀÏÎËÍÈÒÜ ÊÎÍÒÅÍÒÎÌ:
        currentPlayer = _currentPlayer;
        nodeOwner = _nodeOwner;
        offeredMoney = _offeredMoney;
        requestedMoney = _requestedMoney;
        offeredNode = _offeredNode;
        requestedNode = _requestedNode;
        
        //ÏÎÊÀÇÀÒÜ ÏÀÍÅËÜ:
        leftCard.SetActive(false);
        rightCard.SetActive(false);
        tradeOfferPanel.SetActive(true);
        fromWhoOfferText.text = "Îò: " + currentPlayer.nickname;
        descriptionText.text = nodeOwner.nickname + ", ÿ - ñîñòîÿòåëüíûé ÷åëîâåê, êîòîğîìó íå áåçğàçëè÷íà ñóäüáà íàğîäà." +
            " ß õî÷ó ïğåäëîæèòü âàì ñäåëêó. Ïî ğóêàì?";
        rightRequestedMoneyText.text = "+ " + requestedMoney + "BYN";
        rightCard.SetActive(requestedNode != null ? true : false);
        leftOfferedMoneyText.text = "+ " + offeredMoney + "BYN";
        leftCard.SetActive(offeredNode != null ? true : false);
        if (leftCard.activeInHierarchy && offeredNode!=null)
        {
            leftCardPriceText.text = offeredNode.Price + "BYN";
            leftCardNameText.text = offeredNode.name;
            leftColorField.color = (offeredNode.propertyColorField!=null)?offeredNode.propertyColorField.color:Color.black;//DESIGN + ÄËß ICON
            switch (offeredNode.type)
            {
                case MonopolyNodeType.Property:
                    leftPropertyImage.sprite = propertySprite;
                    leftPropertyImage.color = Color.white;//??DESIGN
                    break;
                case MonopolyNodeType.Railroad:
                    leftPropertyImage.sprite = railroadSprite;
                    leftPropertyImage.color = Color.white;//??DESIGN
                    break;
                case MonopolyNodeType.Utility:
                    leftPropertyImage.sprite = utilitySprite;
                    leftPropertyImage.color = Color.black;//DESIGN!!
                    break;
            }
        }
        if (rightCard.activeInHierarchy)
        {
            rightCardNameText.text = requestedNode.name;
            rightCardPriceText.text = requestedNode.Price + "BYN";
            rightColorField.color = (requestedNode.propertyColorField != null) ? requestedNode.propertyColorField.color : Color.black;//DESIGN + ÄËß ICON
            switch (requestedNode.type)
            {
                case MonopolyNodeType.Property:
                    rightPropertyImage.sprite = propertySprite;
                    rightPropertyImage.color = Color.white;//??DESIGN
                    break;
                case MonopolyNodeType.Railroad:
                    rightPropertyImage.sprite = railroadSprite;
                    leftPropertyImage.color = Color.white;//??DESIGN
                    break;
                case MonopolyNodeType.Utility:
                    rightPropertyImage.sprite = utilitySprite;
                    rightPropertyImage.color = Color.black;//DESIGN!!
                    break;
            }
        }
    }
    public void AcceptOffer()
    {
        Trade(currentPlayer,nodeOwner,requestedNode,offeredNode,offeredMoney,requestedMoney);
        ResetOffer();
    }
    public void RejectOffer()
    {
        currentPlayer.ChangeState(Player.AIStates.IDLE);
        ResetOffer();
    }

    private void ResetOffer()
    {
        currentPlayer = null;
        nodeOwner = null;
        offeredMoney = 0;
        requestedMoney = 0;
        offeredNode = null;
        requestedNode = null;
    }
}

